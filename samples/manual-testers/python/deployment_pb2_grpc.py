# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import deployment_pb2 as deployment__pb2


class DeploymentStub(object):
    """Currently only supports deployments with the target scope of resource group.
    Other scopes: subscription, management group, and tenant.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DeploymentGroupCreate = channel.unary_unary(
                '/benchpress.Deployment/DeploymentGroupCreate',
                request_serializer=deployment__pb2.DeploymentGroupRequest.SerializeToString,
                response_deserializer=deployment__pb2.DeploymentResult.FromString,
                )
        self.DeleteGroup = channel.unary_unary(
                '/benchpress.Deployment/DeleteGroup',
                request_serializer=deployment__pb2.DeleteGroupRequest.SerializeToString,
                response_deserializer=deployment__pb2.DeploymentResult.FromString,
                )


class DeploymentServicer(object):
    """Currently only supports deployments with the target scope of resource group.
    Other scopes: subscription, management group, and tenant.
    """

    def DeploymentGroupCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeploymentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DeploymentGroupCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.DeploymentGroupCreate,
                    request_deserializer=deployment__pb2.DeploymentGroupRequest.FromString,
                    response_serializer=deployment__pb2.DeploymentResult.SerializeToString,
            ),
            'DeleteGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGroup,
                    request_deserializer=deployment__pb2.DeleteGroupRequest.FromString,
                    response_serializer=deployment__pb2.DeploymentResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'benchpress.Deployment', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Deployment(object):
    """Currently only supports deployments with the target scope of resource group.
    Other scopes: subscription, management group, and tenant.
    """

    @staticmethod
    def DeploymentGroupCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/benchpress.Deployment/DeploymentGroupCreate',
            deployment__pb2.DeploymentGroupRequest.SerializeToString,
            deployment__pb2.DeploymentResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/benchpress.Deployment/DeleteGroup',
            deployment__pb2.DeleteGroupRequest.SerializeToString,
            deployment__pb2.DeploymentResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
